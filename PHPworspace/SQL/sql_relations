primary key is a column or set of columns in a table that
uniquely identifies each row in that table. It is
used to enforce data integrity and
ensure that each record in the table can be uniquely identified.

logical key - how you might look it up(if we have a search)

foreign key - point to other table(key to another table)
index used for better sorting

Primary key rules

*NEVER USE your logical key as the primary key
(cause it's changes and take more space)

Foreign Keys
a foreign key is when a table has a
column containing a key that points to
the primary key of another table

зовнішній ключ - це коли в таблиці є стовпець
стовпець, що містить ключ, який вказує на
на первинний ключ іншої таблиці

if prim keys are int it make so FAST


CREATE DATABASE Music DEFAULT CHARACTER SET utf8mb4;

USE Music;  (Command line only)

CREATE TABLE Artist (
  artist_id INTEGER NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255),
  PRIMARY KEY(artist_id)
) ENGINE = InnoDB;

CREATE TABLE Album (
  album_id INTEGER NOT NULL AUTO_INCREMENT,
  title VARCHAR(255),
  artist_id INTEGER,

  PRIMARY KEY(album_id),
  INDEX USING BTREE (title),

  CONSTRAINT FOREIGN KEY (artist_id)
    REFERENCES Artist (artist_id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB;

CREATE TABLE Genre (
  genre_id INTEGER NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255),
  PRIMARY KEY(genre_id)
) ENGINE = InnoDB;

CREATE TABLE Track (
  track_id INTEGER NOT NULL AUTO_INCREMENT,
  title VARCHAR(255),
  len INTEGER,
  rating INTEGER,
  `count` INTEGER,
  album_id INTEGER,
  genre_id INTEGER,

  PRIMARY KEY(track_id),
  INDEX USING BTREE (title),

  CONSTRAINT FOREIGN KEY (album_id) REFERENCES Album (album_id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT FOREIGN KEY (genre_id) REFERENCES Genre (genre_id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB;

SELECT track.title, track.len, track.rating , track.count , track.album_id, track.genre_id
FROM album JOIN artist ON album.artist_id = artist.artist_id;





INSERT INTO Artist (`name`) VALUES ('Led Zepplin');
INSERT INTO Artist (`name`) VALUES ('AC/DC');

INSERT INTO Genre (`name`) VALUES ('Rock');
INSERT INTO Genre (`name`) VALUES ('Metal');

INSERT INTO Album (title, artist_id) VALUES ('Who Made Who', 2);
INSERT INTO Album (title, artist_id) VALUES ('IV', 1);

INSERT INTO Track (title, rating, len, `count`, album_id, genre_id)
    VALUES ('Black Dog', 5, 297, 0, 2, 1);
INSERT INTO Track (title, rating, len, `count`, album_id, genre_id)
    VALUES ('Stairway', 5, 482, 0, 2, 1);
INSERT INTO Track (title, rating, len, `count`, album_id, genre_id)
    VALUES ('About to Rock', 5, 313, 0, 1, 2);
INSERT INTO Track (title, rating, len, `count`, album_id, genre_id)
    VALUES ('Who Made Who', 5, 207, 0, 1, 2);

SELECT Album.title, Artist.name FROM Album JOIN Artist ON
    Album.artist_id = Artist.artist_id;

SELECT Album.title, Album.artist_id, Artist.artist_id, Artist.name
    FROM Album JOIN Artist ON Album.artist_id = Artist.artist_id;

SELECT Track.title, Track.genre_id, Genre.genre_id, Genre.name
    FROM Track JOIN Genre;

SELECT Track.title, Genre.name FROM Track JOIN Genre ON
    Track.genre_id = Genre.genre_id;

SELECT Track.title, Artist.name, Album.title, Genre.name
    FROM Track JOIN Genre JOIN Album JOIN Artist
    ON Track.genre_id = Genre.genre_id AND Track.album_id =
    Album.album_id AND Album.artist_id = Artist.artist_id;

DELETE FROM Genre WHERE `name` = 'Metal';

DROP TABLE Track; DROP TABLE Album; DROP TABLE Genre; DROP TABLE Artist;

Fresh Database...

CREATE DATABASE Learning DEFAULT CHARACTER SET utf8mb4;

USE Learning;   (Command line only)

CREATE TABLE `Account` (
    account_id  INTEGER NOT NULL AUTO_INCREMENT,
    email       VARCHAR(128) UNIQUE,
    `name`        VARCHAR(128),
    PRIMARY KEY(account_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4;

CREATE TABLE Course (
    course_id     INTEGER NOT NULL AUTO_INCREMENT,
    title         VARCHAR(128) UNIQUE,
    PRIMARY KEY(course_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4;

CREATE TABLE Member (
    account_id    INTEGER,
    course_id     INTEGER,
    role          INTEGER,

    CONSTRAINT FOREIGN KEY (account_id) REFERENCES `Account` (account_id)
      ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FOREIGN KEY (course_id) REFERENCES Course (course_id)
       ON DELETE CASCADE ON UPDATE CASCADE,

    PRIMARY KEY (account_id, course_id)
) ENGINE=InnoDB CHARACTER SET=utf8mb4;

INSERT INTO `Account` (`name`, email) VALUES ('Jane', 'jane@tsugi.org');
INSERT INTO `Account` (`name`, email) VALUES ('Ed', 'ed@tsugi.org');
INSERT INTO `Account` (`name`, email) VALUES ('Sue', 'sue@tsugi.org');

INSERT INTO Course (title) VALUES ('Python');
INSERT INTO Course (title) VALUES ('SQL');
INSERT INTO Course (title) VALUES ('PHP');

INSERT INTO Member (account_id, course_id, role) VALUES (1, 1, 1);
INSERT INTO Member (account_id, course_id, role) VALUES (2, 1, 0);
INSERT INTO Member (account_id, course_id, role) VALUES (3, 1, 0);

INSERT INTO Member (account_id, course_id, role) VALUES (1, 2, 0);
INSERT INTO Member (account_id, course_id, role) VALUES (2, 2, 1);

INSERT INTO Member (account_id, course_id, role) VALUES (2, 3, 1);
INSERT INTO Member (account_id, course_id, role) VALUES (3, 3, 0);

SELECT `Account`.name, Member.role, Course.title
  FROM `Account` JOIN Member JOIN Course
  ON Member.account_id = `Account`.account_id
    AND Member.course_id = Course.course_id
  ORDER BY Course.title, Member.role DESC, `Account`.name;


UPDATE track t
JOIN album a ON t.album_id = a.album_id
JOIN genre g ON t.genre_id = g.genre_id
SET t.album_name = a.title,
    t.genre_name = g.name;


CREATE TRIGGER set_track_names
BEFORE INSERT ON track
FOR EACH ROW
BEGIN
    SET NEW.album_name = (
        SELECT title FROM album WHERE album_id = NEW.album_id
    );
    SET NEW.genre_name = (
        SELECT name FROM genre WHERE genre_id = NEW.genre_id
    );
END;